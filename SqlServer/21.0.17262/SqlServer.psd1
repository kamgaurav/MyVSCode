
#
# Module manifest for module 'SqlServer'
#
# Generated by: Microsoft Corporation
#
# 

@{

# Script module or binary module file associated with this manifest.
RootModule = 'SqlServer.psm1'

# Version number of this module.
ModuleVersion = '21.0.17262'

# Supported PSEditions
# CompatiblePSEditions = @()

# ID used to uniquely identify this module
GUID = '97C3B589-6545-4107-A061-3FE23A4E9195'

# Author of this module
Author = 'Microsoft Corporation'

# Company or vendor of this module
CompanyName = 'Microsoft Corporation'

# Copyright statement for this module
Copyright = 'Copyright (c) 2018 Microsoft. All rights reserved.'

# Description of the functionality provided by this module
Description = 'This module allows SQL Server developers, administrators and business intelligence professionals to automate database development and server administration, as well as both multidimensional and tabular cube processing.'

# Minimum version of the Windows PowerShell engine required by this module
PowerShellVersion = '5.0'

# Minimum version of the Windows PowerShell host required by this module
# PowerShellHostVersion = ''

# Minimum version of Microsoft .NET Framework required by this module. This prerequisite is valid for the PowerShell Desktop edition only.
DotNetFrameworkVersion = '4.0'

# Minimum version of the common language runtime (CLR) required by this module
CLRVersion = '4.0'

# Processor architecture (None, X86, Amd64) required by this module
# Getting rid of the requirement of a 64-bit machine as this leads the module unusable on Linux/mac
# https://github.com/PowerShell/PowerShell/issues/6533
# The only cmdlet that does not work on a 32-bit OS is Invoke-Sqlcmd. Though on a 64-bit OS this cmdlet works as usual.
ProcessorArchitecture = 'None'

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @( )

# Script files (.ps1) that are run in the caller's environment prior to importing this module
# ScriptsToProcess = @()

# The type and format files are loaded explicitly in the SqlServer.psm1 file as these elements aren't supported on PS Core on linux/mac.
# Type files (.ps1xml) to be loaded when importing this module
# TypesToProcess = 'sqlprovider.types.ps1xml'

# Format files (.ps1xml) to be loaded when importing this module
# FormatsToProcess = 'sqlprovider.format.ps1xml'

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module
FunctionsToExport = @('SQLSERVER:')

# Cmdlets to export from this module
CmdletsToExport = @(
    'Add-RoleMember',
    'Add-SqlAvailabilityDatabase',
    'Add-SqlAvailabilityGroupListenerStaticIp',
    'Add-SqlAzureAuthenticationContext',
    'Add-SqlColumnEncryptionKeyValue',
    'Add-SqlFirewallRule',
    'Add-SqlLogin',
    'Backup-ASDatabase',
    'Backup-SqlDatabase',
    'Complete-SqlColumnMasterKeyRotation',
    'ConvertFrom-EncodedSqlName',
    'ConvertTo-EncodedSqlName',
    'Convert-UrnToPath',
    'Disable-SqlAlwaysOn',
    'Enable-SqlAlwaysOn',
    'Export-SqlVulnerabilityAssessmentBaselineSet',
    'Export-SqlVulnerabilityAssessmentScan',
    'Get-SqlAgent',
    'Get-SqlAgentJob',
    'Get-SqlAgentJobHistory',
    'Get-SqlAgentJobSchedule',
    'Get-SqlAgentJobStep',
    'Get-SqlAgentSchedule',
    'Get-SqlBackupHistory',
    'Get-SqlColumnEncryptionKey',
    'Get-SqlColumnMasterKey',
    'Get-SqlCredential',
    'Get-SqlDatabase',
    'Get-SqlErrorLog',
    'Get-SqlInstance',
    'Get-SqlLogin',
    'Get-SqlSmartAdmin',
    'Grant-SqlAvailabilityGroupCreateAnyDatabase',
    'Import-SqlVulnerabilityAssessmentBaselineSet',
    'Invoke-ASCmd',
    'Invoke-PolicyEvaluation',
    'Invoke-ProcessASDatabase',
    'Invoke-ProcessCube',
    'Invoke-ProcessDimension',
    'Invoke-ProcessPartition',
    'Invoke-ProcessTable',
    'Invoke-Sqlcmd',
    'Invoke-SqlColumnMasterKeyRotation',
    'Invoke-SqlVulnerabilityAssessmentScan'
    'Join-SqlAvailabilityGroup',
    'Merge-Partition',
    'New-RestoreFolder',
    'New-RestoreLocation',
    'New-SqlAvailabilityGroup',
    'New-SqlAvailabilityGroupListener',
    'New-SqlAvailabilityReplica',
    'New-SqlAzureKeyVaultColumnMasterKeySettings',
    'New-SqlBackupEncryptionOption',
    'New-SqlCertificateStoreColumnMasterKeySettings',
    'New-SqlCngColumnMasterKeySettings',
    'New-SqlColumnEncryptionKey',
    'New-SqlColumnEncryptionKeyEncryptedValue',
    'New-SqlColumnEncryptionSettings',
    'New-SqlColumnMasterKey',
    'New-SqlColumnMasterKeySettings',
    'New-SqlCredential',
    'New-SqlCspColumnMasterKeySettings',
    'New-SqlHADREndpoint',
    'New-SqlVulnerabilityAssessmentBaseline',
    'New-SqlVulnerabilityAssessmentBaselineSet',
    'Read-SqlTableData',
    'Read-SqlViewData',
    'Remove-RoleMember',
    'Remove-SqlAvailabilityDatabase',
    'Remove-SqlAvailabilityGroup',
    'Remove-SqlAvailabilityReplica',
    'Remove-SqlColumnEncryptionKey',
    'Remove-SqlColumnEncryptionKeyValue',
    'Remove-SqlColumnMasterKey',
    'Remove-SqlCredential',
    'Remove-SqlFirewallRule',
    'Remove-SqlLogin',
    'Restore-ASDatabase',
    'Restore-SqlDatabase',
    'Resume-SqlAvailabilityDatabase',
    'Revoke-SqlAvailabilityGroupCreateAnyDatabase',
    'Save-SqlMigrationReport',
    'Set-SqlAuthenticationMode',
    'Set-SqlAvailabilityGroup',
    'Set-SqlAvailabilityGroupListener',
    'Set-SqlAvailabilityReplica',
    'Set-SqlAvailabilityReplicaRoleToSecondary',
    'Set-SqlColumnEncryption',
    'Set-SqlCredential',
    'Set-SqlErrorLog',
    'Set-SqlHADREndpoint',
    'Set-SqlNetworkConfiguration',
    'Set-SqlSmartAdmin',
    'Start-SqlInstance',
    'Stop-SqlInstance',
    'Suspend-SqlAvailabilityDatabase',
    'Switch-SqlAvailabilityGroup',
    'Test-SqlAvailabilityGroup',
    'Test-SqlAvailabilityReplica',
    'Test-SqlDatabaseReplicaState',
    'Test-SqlSmartAdmin',
    'Write-SqlTableData' )

# Variables to export from this module
# VariablesToExport = @()

# Aliases to export from this module
AliasesToExport = @('Decode-SqlName', 'Encode-SqlName')

# DSC resources to export from this module
# DscResourcesToExport = @()

# List of all modules packaged with this module
# ModuleList = @()

# List of all files packaged with this module
# FileList = @()

# Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{

        # Tags applied to this module. These help with module discovery in online galleries.
        Tags = 'SQL', 'SqlServer', 'SQLPS', 'Databases', 'SqlAgent', 'Jobs', 'SSAS', 'AnalysisServices', 'Tabular', 'Cubes', 'SSIS', 'ExtendedEvents', 'xEvents', 'VulnerabilityAssessment'

        # A URL to the license for this module.
        LicenseUri = 'https://docs.microsoft.com/sql/relational-databases/scripting/sql-server-powershell-license-terms'

        # A URL to the main website for this project.
        # ProjectUri = ''

        # A URL to an icon representing this module.
        IconUri = 'https://go.microsoft.com/fwlink/?linkid=842808'

        # ReleaseNotes of this module
        ReleaseNotes = @'
## 21.0.17262
Fixes:
* Added StatementTimeout parameter in Backup-SqlDatabase cmdlet with default
  as 0 (no timeout). This fixes the case where Backup operations running longer
  than 10 mins used to timeout. 
* Fixed issue with Always Encrypted cmdlets, where NewtonSoft.Json assembly did
  not load.
* Fixes the issue where Instance name was showing up as empty string on directly 
  creating a SMO.Server object after SqlServer module is imported.

Updates:
* Updated Get-SqlInstance cmdlet. This cmdlet now utilizes SMO and supports 
  all server instances exposed via SMO.
  This cmdlet is now supported on PowerShell 6 as well
* Important: Get-SqlInstance no longer uses CloudAdapter for Sql IaaS instances
  as CloudAdapter stopped shipping from SQL 2016 onwards.
  Users that still use this cmdlet for Sql 2014 IaaS instances 
  should revert to an older version of the SqlServer module.
* Added the following Vulnerability Assessment cmdlets:
    Export-SqlVulnerabilityAssessmentBaselineSet
    Export-SqlVulnerabilityAssessmentScan
    Import-SqlVulnerabilityAssessmentBaselineSet
    Invoke-SqlVulnerabilityAssessmentScan
    New-SqlVulnerabilityAssessmentBaseline
    New-SqlVulnerabilityAssessmentBaselineSet

## 21.0.17240
Fixes:
* Fixed issue where PowerShell was not able to find cmdlets in the module
  unless the user did an explicit ''Import-Module SQLServer''

Updates:
* Added Get-SqlBackupHistory cmdlet
* Ported PS Provider to .NET Core for PowerShell 6 support
* Ported a subset of cmdlets to .NET Core for PowerShell 6 support
* Powershell 6 support on macOS and Linux in Preview.
* To use SqlServer provider on macOS and Linux mount it using a new PSDrive.
  Examples in documentation. 
* Removed restriction of 64-bit OS for this module. Note: Invoke-Sqlcmd 
  cmdlet is the only cmdlet not supported on 32-bit OS. 

## 21.0.17224
Fixes:
* Added logic to prevent the module from being installed on PowerShell Core
* Fixed SqlServer Provider for SSIS

Updates:
* Added support for PSCredential to Invoke-Sqlcmd

## 21.0.17199
Fixes:
* Fixed issue in New-SqlAvailabilityGroup cmdlet when targeting SQL Server 2014

Updates:
* Updated SQL Server provider (SQLRegistration) to display AS/IS/RS groups
* Added -LoadBalancedReadOnlyRoutingList parameter to Set-SqlAvailabilityReplica
  and New-SqlAvailabilityReplica

## 21.0.17178
Updates:
* Updated AnalysisService Cmdlet to use cached login token from Login-AzureAsAccount for Azure Analysis Services.
* Update Backup-ASDatabase and Restore-ASDatabase to support Azure Analysis Services.

## 21.0.17152
Bug Fixes:
* Fixed issue where Invoke-SqlCmd was throwing an error due to
  missing MSVCR120.dll (now included with the module).
* Fixed issue where 'Deploy to Azure Automation' was not working.
* Fixed issue where the SQL Provider was unable to enumerate some containers
  (e.g. Databases) when the module was loaded by passing Import-Module any
  of the -Version/-MinimumVersion/-MaximumVersion parameters.
* Fixed issue in Set-SqlColumnEncryption where the -LogFileDirectory option 
  was not dumping DacFx logs.
* Updated Tags and Description in the manifest file.
* Updated link to License.

Updates:
* Added new parameter '-CertificateThumbprint' to Add-SqlAzureAuthenticationContext
  cmdlet.

## 21.0.17099
First version of SQL PowerShell Module on PSGallery.

'@

        # External dependent modules of this module
        # ExternalModuleDependencies = ''

    } # End of PSData hashtable
    
 } # End of PrivateData hashtable

# HelpInfo URI of this module
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''
}

# SIG # Begin signature block
# MIIkFQYJKoZIhvcNAQcCoIIkBjCCJAICAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCCNH1hu7Q4Jemkg
# MaON6udbutBHEo0aGeTUPu4TLvudLKCCDYMwggYBMIID6aADAgECAhMzAAAAxOmJ
# +HqBUOn/AAAAAADEMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
# bmcgUENBIDIwMTEwHhcNMTcwODExMjAyMDI0WhcNMTgwODExMjAyMDI0WjB0MQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
# AQCIirgkwwePmoB5FfwmYPxyiCz69KOXiJZGt6PLX4kvOjMuHpF4+nypH4IBtXrL
# GrwDykbrxZn3+wQd8oUK/yJuofJnPcUnGOUoH/UElEFj7OO6FYztE5o13jhwVG87
# 7K1FCTBJwb6PMJkMy3bJ93OVFnfRi7uUxwiFIO0eqDXxccLgdABLitLckevWeP6N
# +q1giD29uR+uYpe/xYSxkK7WryvTVPs12s1xkuYe/+xxa8t/CHZ04BBRSNTxAMhI
# TKMHNeVZDf18nMjmWuOF9daaDx+OpuSEF8HWyp8dAcf9SKcTkjOXIUgy+MIkogCy
# vlPKg24pW4HvOG6A87vsEwvrAgMBAAGjggGAMIIBfDAfBgNVHSUEGDAWBgorBgEE
# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQUy9ZihM9gOer/Z8Jc0si7q7fDE5gw
# UgYDVR0RBEswSaRHMEUxDTALBgNVBAsTBE1PUFIxNDAyBgNVBAUTKzIzMDAxMitj
# ODA0YjVlYS00OWI0LTQyMzgtODM2Mi1kODUxZmEyMjU0ZmMwHwYDVR0jBBgwFoAU
# SG5k5VAF04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDovL3d3
# dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAxMV8yMDEx
# LTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6Ly93
# d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAxMV8y
# MDExLTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQAG
# Fh/bV8JQyCNPolF41+34/c291cDx+RtW7VPIaUcF1cTL7OL8mVuVXxE4KMAFRRPg
# mnmIvGar27vrAlUjtz0jeEFtrvjxAFqUmYoczAmV0JocRDCppRbHukdb9Ss0i5+P
# WDfDThyvIsoQzdiCEKk18K4iyI8kpoGL3ycc5GYdiT4u/1cDTcFug6Ay67SzL1BW
# XQaxFYzIHWO3cwzj1nomDyqWRacygz6WPldJdyOJ/rEQx4rlCBVRxStaMVs5apao
# pIhrlihv8cSu6r1FF8xiToG1VBpHjpilbcBuJ8b4Jx/I7SCpC7HxzgualOJqnWmD
# oTbXbSD+hdX/w7iXNgn+PRTBmBSpwIbM74LBq1UkQxi1SIV4htD50p0/GdkUieeN
# n2gkiGg7qceATibnCCFMY/2ckxVNM7VWYE/XSrk4jv8u3bFfpENryXjPsbtrj4Ns
# h3Kq6qX7n90a1jn8ZMltPgjlfIOxrbyjunvPllakeljLEkdi0iHv/DzEMQv3Lz5k
# pTdvYFA/t0SQT6ALi75+WPbHZ4dh256YxMiMy29H4cAulO2x9rAwbexqSajplnbI
# vQjE/jv1rnM3BrJWzxnUu/WUyocc8oBqAU+2G4Fzs9NbIj86WBjfiO5nxEmnL9wl
# iz1e0Ow0RJEdvJEMdoI+78TYLaEEAo5I+e/dAs8DojCCB3owggVioAMCAQICCmEO
# kNIAAAAAAAMwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
# EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3Nv
# ZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmlj
# YXRlIEF1dGhvcml0eSAyMDExMB4XDTExMDcwODIwNTkwOVoXDTI2MDcwODIxMDkw
# OVowfjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
# B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEoMCYGA1UE
# AxMfTWljcm9zb2Z0IENvZGUgU2lnbmluZyBQQ0EgMjAxMTCCAiIwDQYJKoZIhvcN
# AQEBBQADggIPADCCAgoCggIBAKvw+nIQHC6t2G6qghBNNLrytlghn0IbKmvpWlCq
# uAY4GgRJun/DDB7dN2vGEtgL8DjCmQawyDnVARQxQtOJDXlkh36UYCRsr55JnOlo
# XtLfm1OyCizDr9mpK656Ca/XllnKYBoF6WZ26DJSJhIv56sIUM+zRLdd2MQuA3Wr
# aPPLbfM6XKEW9Ea64DhkrG5kNXimoGMPLdNAk/jj3gcN1Vx5pUkp5w2+oBN3vpQ9
# 7/vjK1oQH01WKKJ6cuASOrdJXtjt7UORg9l7snuGG9k+sYxd6IlPhBryoS9Z5JA7
# La4zWMW3Pv4y07MDPbGyr5I4ftKdgCz1TlaRITUlwzluZH9TupwPrRkjhMv0ugOG
# jfdf8NBSv4yUh7zAIXQlXxgotswnKDglmDlKNs98sZKuHCOnqWbsYR9q4ShJnV+I
# 4iVd0yFLPlLEtVc/JAPw0XpbL9Uj43BdD1FGd7P4AOG8rAKCX9vAFbO9G9RVS+c5
# oQ/pI0m8GLhEfEXkwcNyeuBy5yTfv0aZxe/CHFfbg43sTUkwp6uO3+xbn6/83bBm
# 4sGXgXvt1u1L50kppxMopqd9Z4DmimJ4X7IvhNdXnFy/dygo8e1twyiPLI9AN0/B
# 4YVEicQJTMXUpUMvdJX3bvh4IFgsE11glZo+TzOE2rCIF96eTvSWsLxGoGyY0uDW
# iIwLAgMBAAGjggHtMIIB6TAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4EFgQUSG5k
# 5VAF04KqFzc3IrVtqMp1ApUwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYD
# VR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUci06AjGQQ7kU
# BU7h6qfHMdEjiTQwWgYDVR0fBFMwUTBPoE2gS4ZJaHR0cDovL2NybC5taWNyb3Nv
# ZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAz
# XzIyLmNybDBeBggrBgEFBQcBAQRSMFAwTgYIKwYBBQUHMAKGQmh0dHA6Ly93d3cu
# bWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAz
# XzIyLmNydDCBnwYDVR0gBIGXMIGUMIGRBgkrBgEEAYI3LgMwgYMwPwYIKwYBBQUH
# AgEWM2h0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvZG9jcy9wcmltYXJ5
# Y3BzLmh0bTBABggrBgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBwAG8AbABpAGMA
# eQBfAHMAdABhAHQAZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0BAQsFAAOCAgEAZ/KG
# pZjgVHkaLtPYdGcimwuWEeFjkplCln3SeQyQwWVfLiw++MNy0W2D/r4/6ArKO79H
# qaPzadtjvyI1pZddZYSQfYtGUFXYDJJ80hpLHPM8QotS0LD9a+M+By4pm+Y9G6XU
# tR13lDni6WTJRD14eiPzE32mkHSDjfTLJgJGKsKKELukqQUMm+1o+mgulaAqPypr
# WEljHwlpblqYluSD9MCP80Yr3vw70L01724lruWvJ+3Q3fMOr5kol5hNDj0L8giJ
# 1h/DMhji8MUtzluetEk5CsYKwsatruWy2dsViFFFWDgycScaf7H0J/jeLDogaZiy
# WYlobm+nt3TDQAUGpgEqKD6CPxNNZgvAs0314Y9/HG8VfUWnduVAKmWjw11SYobD
# HWM2l4bf2vP48hahmifhzaWX0O5dY0HjWwechz4GdwbRBrF1HxS+YWG18NzGGwS+
# 30HHDiju3mUv7Jf2oVyW2ADWoUa9WfOXpQlLSBCZgB/QACnFsZulP0V3HjXG0qKi
# n3p6IvpIlR+r+0cjgPWe+L9rt0uX4ut1eBrs6jeZeRhL/9azI2h15q/6/IvrC4Dq
# aTuv/DDtBEyO3991bWORPdGdVk5Pv4BXIqF4ETIheu9BCrE/+6jMpF3BoYibV3FW
# TkhFwELJm3ZbCoBIa/15n8G9bW1qyVJzEw16UM0xghXoMIIV5AIBATCBlTB+MQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNy
# b3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExAhMzAAAAxOmJ+HqBUOn/AAAAAADE
# MA0GCWCGSAFlAwQCAQUAoIHaMBkGCSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMBwG
# CisGAQQBgjcCAQsxDjAMBgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCCrEb+j
# RyMwr6Es4rqPMW+VbjAe2ovpt74aiMw2dXwoZzBuBgorBgEEAYI3AgEMMWAwXqA6
# gDgAUwBRAEwAIABTAGUAcgB2AGUAcgAgAE0AYQBuAGEAZwBlAG0AZQBuAHQAIABT
# AHQAdQBkAGkAb6EggB5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vc3FsLyAwDQYJ
# KoZIhvcNAQEBBQAEggEAf0lMKJxD3MUEmSOmtPdlHBWvMli5d7sS1ROdXjIjFZ3o
# jxFldPM+cCPdT1LfIBTgGc1opk+2yeT0U/tKQCIrxKRb4vKfa3r6i/g8AvxRJMTg
# 5F/6FHnHhrp2NoVaE8mT4bnI0Yn9lLjQ1aPD9kNcQ85Ayajv0ugaBXyZRpJoz7iM
# d2gOa7yi1IGqgzEeLRr6fme3zkKlQJSHwTEuh7b3cfGhK4oPYeb5E8BDOjl/7YAh
# /AkQOlN81ST6K86lwZQEQ2AmKj71/Sx0l/tGEm318ULV+QPLwsESHXT+rYt2Nm4V
# 5DBWN/CwgZjYMlCOOB3HM4nHPpLxqIG7Cwfi4+BIjqGCE0YwghNCBgorBgEEAYI3
# AwMBMYITMjCCEy4GCSqGSIb3DQEHAqCCEx8wghMbAgEDMQ8wDQYJYIZIAWUDBAIB
# BQAwggE7BgsqhkiG9w0BCRABBKCCASoEggEmMIIBIgIBAQYKKwYBBAGEWQoDATAx
# MA0GCWCGSAFlAwQCAQUABCAHfxba2iwqGl2CqaaWi6k3O0r7T0upmmThBF9UxoNu
# vwIGWt5r9UgvGBMyMDE4MDUxMDAzMDQ1NC45MjJaMAcCAQGAAgH0oIG3pIG0MIGx
# MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVk
# bW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMQwwCgYDVQQLEwNB
# T0MxJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOjk2RkYtNEJDNS1BN0RDMSUwIwYD
# VQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNloIIOyzCCBnEwggRZoAMC
# AQICCmEJgSoAAAAAAAIwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMw
# EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
# aWNyb3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290IENl
# cnRpZmljYXRlIEF1dGhvcml0eSAyMDEwMB4XDTEwMDcwMTIxMzY1NVoXDTI1MDcw
# MTIxNDY1NVowfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
# BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEm
# MCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwggEiMA0GCSqG
# SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCpHQ28dxGKOiDs/BOX9fp/aZRrdFQQ1aUK
# AIKF++18aEssX8XD5WHCdrc+Zitb8BVTJwQxH0EbGpUdzgkTjnxhMFmxMEQP8WCI
# hFRDDNdNuDgIs0Ldk6zWczBXJoKjRQ3Q6vVHgc2/JGAyWGBG8lhHhjKEHnRhZ5Ff
# gVSxz5NMksHEpl3RYRNuKMYa+YaAu99h/EbBJx0kZxJyGiGKr0tkiVBisV39dx89
# 8Fd1rL2KQk1AUdEPnAY+Z3/1ZsADlkR+79BL/W7lmsqxqPJ6Kgox8NpOBpG2iAg1
# 6HgcsOmZzTznL0S6p/TcZL2kAcEgCZN4zfy8wMlEXV4WnAEFTyJNAgMBAAGjggHm
# MIIB4jAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4EFgQU1WM6XIoxkPNDe3xGG8Uz
# aFqFbVUwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8G
# A1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU1fZWy4/oolxiaNE9lJBb186aGMQw
# VgYDVR0fBE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9j
# cmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3JsMFoGCCsGAQUF
# BwEBBE4wTDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
# aS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcnQwgaAGA1UdIAEB/wSB
# lTCBkjCBjwYJKwYBBAGCNy4DMIGBMD0GCCsGAQUFBwIBFjFodHRwOi8vd3d3Lm1p
# Y3Jvc29mdC5jb20vUEtJL2RvY3MvQ1BTL2RlZmF1bHQuaHRtMEAGCCsGAQUFBwIC
# MDQeMiAdAEwAZQBnAGEAbABfAFAAbwBsAGkAYwB5AF8AUwB0AGEAdABlAG0AZQBu
# AHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQAH5ohRDeLG4Jg/gXEDPZ2joSFvs+um
# zPUxvs8F4qn++ldtGTCzwsVmyWrf9efweL3HqJ4l4/m87WtUVwgrUYJEEvu5U4zM
# 9GASinbMQEBBm9xcF/9c+V4XNZgkVkt070IQyK+/f8Z/8jd9Wj8c8pl5SpFSAK84
# Dxf1L3mBZdmptWvkx872ynoAb0swRCQiPM/tA6WWj1kpvLb9BOFwnzJKJ/1Vry/+
# tuWOM7tiX5rbV0Dp8c6ZZpCM/2pif93FSguRJuI57BlKcWOdeyFtw5yjojz6f32W
# apB4pm3S4Zz5Hfw42JT0xqUKloakvZ4argRCg7i1gJsiOCC1JeVk7Pf0v35jWSUP
# ei45V3aicaoGig+JFrphpxHLmtgOR5qAxdDNp9DvfYPw4TtxCd9ddJgiCGHasFAe
# b73x4QDf5zEHpJM692VHeOj4qEir995yfmFrb3epgcunCaw5u+zGy9iCtHLNHfS4
# hQEegPsbiSpUObJb2sgNVZl6h3M7COaYLeqN4DMuEin1wC9UJyH3yKxO2ii4sanb
# lrKnQqLJzxlBTeCG+SqaoxFmMNO7dDJL32N79ZmKLxvHIa9Zta7cRDyXUHHXodLF
# VeNp3lfB0d4wwP3M5k37Db9dT+mdHhk4L7zPWAUu7w2gUDXa7wknHNWzfjUeCLra
# NtvTX4/edIhJEjCCBNgwggPAoAMCAQICEzMAAAC2i0dDssytHwQAAAAAALYwDQYJ
# KoZIhvcNAQELBQAwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
# EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
# bjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwHhcNMTcx
# MDAyMjMwMDUyWhcNMTkwMTAyMjMwMDUyWjCBsTELMAkGA1UEBhMCVVMxEzARBgNV
# BAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
# c29mdCBDb3Jwb3JhdGlvbjEMMAoGA1UECxMDQU9DMSYwJAYDVQQLEx1UaGFsZXMg
# VFNTIEVTTjo5NkZGLTRCQzUtQTdEQzElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUt
# U3RhbXAgU2VydmljZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANiJ
# ZxdISwi3RBuTEcM6z25BQKaoXGJjslsjRDM19Z7d/cByy4tJbDB7IQBlkpYpRKcM
# e1M/WU4ge5ZuslgQ7649EYd8NWYqb7X8r9DCSnKtP84Q49cQCcXlEuNfzmDo2/hq
# SW0/JaBpUaej1iz8Q+FCCUo0PVRISiS/fOHdpmcL3myxUrjHyNIRmyZ0/px3YBpm
# YywMP9gBBN++eTMKyeo/u6UUdjWHEtl3XTIW8e7y921gXSh9J2ZpHUkX5JXt+A7+
# uGeb/7y67R3XpPB7CbAoBGpKcxEk1fPKNRNsVsXGHHDWE7WzRga0LKpJROeYlQ8V
# u9OlLXkIAYAfDaZMwTECAwEAAaOCARswggEXMB0GA1UdDgQWBBTzbcKQAScg2o8z
# HMBfaGrfgQOF0DAfBgNVHSMEGDAWgBTVYzpcijGQ80N7fEYbxTNoWoVtVTBWBgNV
# HR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9w
# cm9kdWN0cy9NaWNUaW1TdGFQQ0FfMjAxMC0wNy0wMS5jcmwwWgYIKwYBBQUHAQEE
# TjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2Nl
# cnRzL01pY1RpbVN0YVBDQV8yMDEwLTA3LTAxLmNydDAMBgNVHRMBAf8EAjAAMBMG
# A1UdJQQMMAoGCCsGAQUFBwMIMA0GCSqGSIb3DQEBCwUAA4IBAQAv19XqvpiOeBy6
# wypDpE1MzGUzKEcV5TqW3hbl1zq7PTwqQMYjIrhA2dj8UWRSETiDxu9K+cIIKZmB
# LpaFZTKcReDsqB2Gmmsp3bixBP+33/lKKNsQ8BIszJf52bSqKGLIsCqD66X10OgK
# 4epSQs2sRAcpGe5eMZY/+HW35djuRHzMj9lHDNbA6OsQjx/KjbBeH6iOanurNuT1
# 8zMMdd8pL2TInt3bfQbDGdY0k2kPB1pLoFSVwB55TZFqKJen1UZUdJu5afUeAzqc
# Zjq3aOvMJ8IDixroQQWFYZJJkpIB+XNk+a0M/t3d0r8fYr660odXElNAB4TbTMOu
# Wre2rGRIoYIDdjCCAl4CAQEwgeGhgbekgbQwgbExCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xDDAKBgNVBAsTA0FPQzEmMCQGA1UECxMdVGhhbGVz
# IFRTUyBFU046OTZGRi00QkM1LUE3REMxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1l
# LVN0YW1wIFNlcnZpY2WiJQoBATAJBgUrDgMCGgUAAxUA/xYr7xVcs9W1liu+CEsh
# /E10AAGggcEwgb6kgbswgbgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5n
# dG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9y
# YXRpb24xDDAKBgNVBAsTA0FPQzEnMCUGA1UECxMebkNpcGhlciBOVFMgRVNOOjI2
# NjUtNEMzRi1DNURFMSswKQYDVQQDEyJNaWNyb3NvZnQgVGltZSBTb3VyY2UgTWFz
# dGVyIENsb2NrMA0GCSqGSIb3DQEBBQUAAgUA3p0lvDAiGA8yMDE4MDUwOTA3NDYw
# NFoYDzIwMTgwNTEwMDc0NjA0WjB3MD0GCisGAQQBhFkKBAExLzAtMAoCBQDenSW8
# AgEAMAoCAQACAiBxAgH/MAcCAQACAhcqMAoCBQDennc8AgEAMDYGCisGAQQBhFkK
# BAIxKDAmMAwGCisGAQQBhFkKAwGgCjAIAgEAAgMW42ChCjAIAgEAAgMehIAwDQYJ
# KoZIhvcNAQEFBQADggEBAGHrlXYRFSER9hoRs/7Rq0hRuIAAAM8dM0NsIx30+JmJ
# cRdH7fwq4V88y2jcIQoiNXQ/Th1dU8cufn0mqExDnW+vQY2u3kjiE3OQCbIvyGvN
# WMh+DfAG3Ocw6B2Qw0S31P7YrI4XPNykz0FAojcNICkY58E6hdCfR+UeaHTSwdMf
# l82nLKzcSpLR8SHQmII2pTiwBdpTn9uNfZwpKTVi/bKubCPQXGScJgRn6VVJ8JX4
# IczWR9qPFw2PyvgHaRFpz1PfCzgno7yOTsWcD3ydE/dZc1id0woecmkLC2Ti/Ozm
# 9YB3hbTMJICkorviL/viVpoq77muigze+vPfORqkPGkxggL1MIIC8QIBATCBkzB8
# MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVk
# bW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1N
# aWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAALaLR0OyzK0fBAAAAAAA
# tjANBglghkgBZQMEAgEFAKCCATIwGgYJKoZIhvcNAQkDMQ0GCyqGSIb3DQEJEAEE
# MC8GCSqGSIb3DQEJBDEiBCDh1URg7s5xEj1Rfd/ldaKPZxyTtJ5vPH9kTGW50jmn
# 9zCB4gYLKoZIhvcNAQkQAgwxgdIwgc8wgcwwgbEEFP8WK+8VXLPVtZYrvghLIfxN
# dAABMIGYMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
# EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
# bjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAAC2
# i0dDssytHwQAAAAAALYwFgQUUcNr6dfwMvEYC5qgh+VpCQRU8jgwDQYJKoZIhvcN
# AQELBQAEggEAf7Bhdp4itxkI6/ShdO3mMq6XJ367F664nTaHjqqxHZoSE1yWETY+
# nph0oe7cMrmC6tCGIvGUdgwRKP2Vjk3zW7auWxSf3clCtg6+6DEtMhIQOC/JYLks
# AlDZCyVbtn60PWRf/FlSlCPsOY23lpBvelMZQB8BRZJ0tbYJC8Ds97kjGVRWdGxN
# NJyyP+FGtCUB/UAnPzypXVNJorWK3l4F4mZFcxrRXp2Lrl5aKdrjx4F2nuzkXiSl
# GseJ1XyqqBlTfkOneM+OUXzIWOBPEH+TMm4NEsZSfy/D19tNzz2XhrqTCdOi/lXA
# 74vphNw1jIIlSduWCl0B4PgX7Z9tI8/zEA==
# SIG # End signature block
